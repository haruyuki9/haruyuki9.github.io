<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人最爱术力口30选</title>
      <link href="/2025/01/30/%E4%B8%AA%E4%BA%BA%E6%9C%80%E7%88%B1%E6%9C%AF%E5%8A%9B%E5%8F%A330%E9%80%89/"/>
      <url>/2025/01/30/%E4%B8%AA%E4%BA%BA%E6%9C%80%E7%88%B1%E6%9C%AF%E5%8A%9B%E5%8F%A330%E9%80%89/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon simple"><p>偶然在朋友圈看到了一张30天推歌挑战的图片，于是决定借那张图片上的问题推荐几首自己喜欢的歌。（部分问题有修改）另外，点击对应歌曲名可以跳转网易云歌曲页！如果碰到没听过的务必要点开来听听看！(题外：双子骨真好吃!!!)</p></div><table><thead><tr><th align="center"></th><th align="center"></th><th align="center">个人最爱术力口30选</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"><a href="#1">在歌名里带有颜色的歌</a></td><td align="center"><a href="#2">在歌名里带有数字的歌</a></td><td align="center"><a href="#3">听到会想起夏天的歌</a></td><td align="center"><a href="#4">会想到宁愿忘记的人的歌</a></td><td align="center"><a href="#5">最令你感动的歌</a></td></tr><tr><td align="center"><a href="#6">一首会让你想尽情跳舞的歌</a></td><td align="center"><a href="#7">听了会摇头晃脑的歌</a></td><td align="center"><a href="#8">关于毒品（药物）或酒精的歌</a></td><td align="center"><a href="#9">让人感到开心的歌</a></td><td align="center"><a href="#10">让人感到难过的歌</a></td></tr><tr><td align="center"><a href="#11">永远不会厌倦的歌</a></td><td align="center"><a href="#12">00年代最喜欢的曲子</a></td><td align="center"><a href="#13">想在婚礼上放的歌</a></td><td align="center"><a href="#14">10年代最喜欢的曲子</a></td><td align="center"><a href="#15">人生中听过的第一首术曲</a></td></tr><tr><td align="center"><a href="#16">To</a></td><td align="center"><a href="#17">be</a></td><td align="center"><a href="#18">continued</a></td><td align="center"><a href="#19">.</a></td><td align="center"><a href="#20">.</a></td></tr><tr><td align="center"><a href="#21"></a></td><td align="center"><a href="#22"></a></td><td align="center"><a href="#23"></a></td><td align="center"><a href="#24"></a></td><td align="center"><a href="#25"></a></td></tr><tr><td align="center"><a href="#26"></a></td><td align="center"><a href="#27"></a></td><td align="center"><a href="#28"></a></td><td align="center"><a href="#29"></a></td><td align="center"><a href="#30"></a></td></tr></tbody></table><h2 id="在歌名里带有颜色的歌"><a href="#在歌名里带有颜色的歌" class="headerlink" title="在歌名里带有颜色的歌"></a>在歌名里带有颜色的歌<span id="1"></span></h2><h3 id="コバルトメモリーズ（蔚蓝色的回忆）"><a href="#コバルトメモリーズ（蔚蓝色的回忆）" class="headerlink" title="コバルトメモリーズ（蔚蓝色的回忆）"></a><a href="https://music.163.com/song?id=1335797416&uct2=U2FsdGVkX1/ntqpGXIo8VusWeh/w3MGN1EMdyPxYW+4=">コバルトメモリーズ（蔚蓝色的回忆）</a></h3><h4 id="欢快的曲调-饭特有的软绵绵声线，独属于夏日的慵懒！"><a href="#欢快的曲调-饭特有的软绵绵声线，独属于夏日的慵懒！" class="headerlink" title="欢快的曲调,饭特有的软绵绵声线，独属于夏日的慵懒！"></a>欢快的曲调,饭特有的软绵绵声线，独属于夏日的慵懒！</h4><blockquote><p>「誰も居ない街 誰も居ない空、世界は二人だけかもしれないね」<br>&emsp;&emsp;空荡荡的街道 空荡荡的天空，世界上说不定只剩下我们两个人了 — コバルトメモリーズ</p></blockquote><h2 id="在歌名里带有数字的歌"><a href="#在歌名里带有数字的歌" class="headerlink" title="在歌名里带有数字的歌"></a>在歌名里带有数字的歌<span id="2"></span></h2><h3 id="六兆年と一夜物語（六兆年零一夜物语）"><a href="#六兆年と一夜物語（六兆年零一夜物语）" class="headerlink" title="六兆年と一夜物語（六兆年零一夜物语）"></a><a href="https://music.163.com/song?id=26142121&uct2=U2FsdGVkX19lzPMOCjP860JoF9JXlDGlgbHTEcDjJkM=">六兆年と一夜物語（六兆年零一夜物语）</a></h3><h4 id="堀江晶太的一代炸厕所神曲，希腊奶-希腊奶"><a href="#堀江晶太的一代炸厕所神曲，希腊奶-希腊奶" class="headerlink" title="堀江晶太的一代炸厕所神曲，希腊奶~希腊奶~"></a>堀江晶太的一代炸厕所神曲，希腊奶~希腊奶~</h4><blockquote><p>「知らない知らない、僕は何も知らない」<br>&emsp;&emsp;不知道啊不知道啊，我什么也不知道啊！ — 六兆年と一夜物語</p></blockquote><h2 id="听到会想起夏天的歌"><a href="#听到会想起夏天的歌" class="headerlink" title="听到会想起夏天的歌"></a>听到会想起夏天的歌<span id="3"></span></h2><h3 id="コバルトメモリーズ（蔚蓝色的回忆）-1"><a href="#コバルトメモリーズ（蔚蓝色的回忆）-1" class="headerlink" title="コバルトメモリーズ（蔚蓝色的回忆）"></a><a href="https://music.163.com/song?id=1335797416&uct2=U2FsdGVkX1/ntqpGXIo8VusWeh/w3MGN1EMdyPxYW+4=">コバルトメモリーズ（蔚蓝色的回忆）</a></h3><h4 id="虽然重复了但是！找来找去还是这首最符合了！本来想选一首橙星的歌但是选来选去都没有这首有感觉！"><a href="#虽然重复了但是！找来找去还是这首最符合了！本来想选一首橙星的歌但是选来选去都没有这首有感觉！" class="headerlink" title="虽然重复了但是！找来找去还是这首最符合了！本来想选一首橙星的歌但是选来选去都没有这首有感觉！"></a>虽然重复了但是！找来找去还是这首最符合了！本来想选一首橙星的歌但是选来选去都没有这首有感觉！</h4><h2 id="会想到宁愿忘记的人的歌"><a href="#会想到宁愿忘记的人的歌" class="headerlink" title="会想到宁愿忘记的人的歌"></a>会想到宁愿忘记的人的歌<span id="4"></span></h2><h3 id="1-6-Out-of-the-gravity"><a href="#1-6-Out-of-the-gravity" class="headerlink" title="1&#x2F;6 -Out of the gravity-"></a><a href="https://music.163.com/song?id=28382729&uct2=U2FsdGVkX1+UtFI7E6/zQOMhVg+YPWY2bc7vFcqGD+U=">1&#x2F;6 -Out of the gravity-</a></h3><h4 id="初中的时候超级喜欢这首，好像真的坐着宇宙飞船飞到了重力只有地球1-6的月亮上。可惜一些往事和这首歌联系在了一起，要是那份痛苦也能变成1-6就好了。"><a href="#初中的时候超级喜欢这首，好像真的坐着宇宙飞船飞到了重力只有地球1-6的月亮上。可惜一些往事和这首歌联系在了一起，要是那份痛苦也能变成1-6就好了。" class="headerlink" title="初中的时候超级喜欢这首，好像真的坐着宇宙飞船飞到了重力只有地球1&#x2F;6的月亮上。可惜一些往事和这首歌联系在了一起，要是那份痛苦也能变成1&#x2F;6就好了。"></a>初中的时候超级喜欢这首，好像真的坐着宇宙飞船飞到了重力只有地球1&#x2F;6的月亮上。可惜一些往事和这首歌联系在了一起，要是那份痛苦也能变成1&#x2F;6就好了。</h4><blockquote><p>「辛いコトや悲しいコトも全部1&#x2F;6」<br>&emsp;&emsp;无论是痛苦还是悲伤全部都只剩1&#x2F;6 — 1&#x2F;6 -Out of the gravity-</p></blockquote><h2 id="最令你感动的歌"><a href="#最令你感动的歌" class="headerlink" title="最令你感动的歌"></a>最令你感动的歌<span id="5"></span></h2><h3 id="銀河録（银河录）"><a href="#銀河録（银河录）" class="headerlink" title="銀河録（银河录）"></a><a href="https://music.163.com/song?id=492999798&uct2=U2FsdGVkX188FP6mONJu354xFkBE4CKLMP7QoZWX1nc=">銀河録（银河录）</a></h3><h4 id="神曲，情感调动太到位了！（？）听这首总是会忍不住想哭。"><a href="#神曲，情感调动太到位了！（？）听这首总是会忍不住想哭。" class="headerlink" title="神曲，情感调动太到位了！（？）听这首总是会忍不住想哭。"></a>神曲，情感调动太到位了！（？）听这首总是会忍不住想哭。</h4><blockquote><p>「銀河みたいな 銀河みたいな、銀河みたいな街だったね」<br>&emsp;&emsp;宛若银河一般，宛若银河一般，那是宛若银河一般的街道呢 — 銀河録</p></blockquote><h2 id="一首会让你想尽情跳舞的歌"><a href="#一首会让你想尽情跳舞的歌" class="headerlink" title="一首会让你想尽情跳舞的歌"></a>一首会让你想尽情跳舞的歌<span id="6"></span></h2><h3 id="しかばねの踊り（尸骸之舞）"><a href="#しかばねの踊り（尸骸之舞）" class="headerlink" title="しかばねの踊り（尸骸之舞）"></a><a href="https://music.163.com/song?id=29185031&uct2=U2FsdGVkX1/5MKlGOo2SoMzXpzmSHkSNiepUrxfHwkM=">しかばねの踊り（尸骸之舞）</a></h3><h4 id="无言，请看VCR"><a href="#无言，请看VCR" class="headerlink" title="无言，请看VCR"></a>无言，请看VCR<img class="inline-img" src="/images/bone.gif" style="height:50px" /></h4><blockquote><p>「しかばね音頭で踊りましょう」<br>&emsp;&emsp;伴着尸骸音头 起舞吧 — しかばねの踊り</p></blockquote><h2 id="听了会摇头晃脑的歌"><a href="#听了会摇头晃脑的歌" class="headerlink" title="听了会摇头晃脑的歌"></a>听了会摇头晃脑的歌<span id="7"></span></h2><h3 id="ストリーミングハート（流心）"><a href="#ストリーミングハート（流心）" class="headerlink" title="ストリーミングハート（流心）"></a><a href="https://music.163.com/song?id=28364360&uct2=U2FsdGVkX18O2C7Ps2LBb9svibgzDquSynGWrtuDhOw=">ストリーミングハート（流心）</a></h3><h4 id="我是真喜欢Deco原来的曲风，又毒又躁。更古早时期的小甜曲也喜欢！不过真的不喜欢最近的Deco（我自己称之为后吸血鬼时代）（耻度中二度拉满的特有名词环节）。"><a href="#我是真喜欢Deco原来的曲风，又毒又躁。更古早时期的小甜曲也喜欢！不过真的不喜欢最近的Deco（我自己称之为后吸血鬼时代）（耻度中二度拉满的特有名词环节）。" class="headerlink" title="我是真喜欢Deco原来的曲风，又毒又躁。更古早时期的小甜曲也喜欢！不过真的不喜欢最近的Deco（我自己称之为后吸血鬼时代）（耻度中二度拉满的特有名词环节）。"></a>我是真喜欢Deco原来的曲风，又毒又躁。更古早时期的小甜曲也喜欢！不过真的不喜欢最近的Deco（我自己称之为后吸血鬼时代）（耻度中二度拉满的特有名词环节）。</h4><blockquote><p>「アイマイにしたいのさ、好きでいたって 歪んでく内声」<br>&emsp;&emsp;想要變得曖昧啊，說道曾喜歡過你 如此扭曲了的心聲 — ストリーミングハート</p></blockquote><h2 id="关于毒品（药物）或酒精的歌"><a href="#关于毒品（药物）或酒精的歌" class="headerlink" title="关于毒品（药物）或酒精的歌"></a>关于毒品（药物）或酒精的歌<span id="8"></span></h2><h3 id="シャンティ（Shanti）"><a href="#シャンティ（Shanti）" class="headerlink" title="シャンティ（Shanti）"></a>シャンティ（Shanti）</h3><h4 id="唐人街毒贩kaito伪装牛郎不打麻药噶人腰子，wotaku的毒区听起来是真的爽。"><a href="#唐人街毒贩kaito伪装牛郎不打麻药噶人腰子，wotaku的毒区听起来是真的爽。" class="headerlink" title="唐人街毒贩kaito伪装牛郎不打麻药噶人腰子，wotaku的毒区听起来是真的爽。"></a>唐人街毒贩kaito伪装牛郎不打麻药噶人腰子，wotaku的毒区听起来是真的爽。</h4><blockquote><p>「生きてればお客、死んでれば商材」<br>&emsp;&emsp;只要活着的话便是客人，只要死去的话便是商品 — シャンティ</p></blockquote><h2 id="让人感到开心的歌"><a href="#让人感到开心的歌" class="headerlink" title="让人感到开心的歌 "></a>让人感到开心的歌 <span id="9"></span></h2><h3 id="好き！雪！本気-マジ-マジック（喜欢！雪！真实的魔法）"><a href="#好き！雪！本気-マジ-マジック（喜欢！雪！真实的魔法）" class="headerlink" title="好き！雪！本気(マジ)マジック（喜欢！雪！真实的魔法）"></a><a href="https://music.163.com/song?id=28387072&uct2=U2FsdGVkX19egq/VeMkPnXtr8j8h4UFTVFiK9mVTvVI=">好き！雪！本気(マジ)マジック（喜欢！雪！真实的魔法）</a></h3><h4 id="永远忘不掉的一天。和朋友们出去玩雪真的超级开心！"><a href="#永远忘不掉的一天。和朋友们出去玩雪真的超级开心！" class="headerlink" title="永远忘不掉的一天。和朋友们出去玩雪真的超级开心！"></a>永远忘不掉的一天。和朋友们出去玩雪真的超级开心！</h4><blockquote><p>「Ah Whipしたケーキのような街は 好き！雪！本気 Magic」<br>&emsp;&emsp;Ah 像撒上奶油般的街道 喜欢！雪！真实 Magic — 好き！雪！本気(マジ)マジック</p></blockquote><h2 id="让人感到难过的歌"><a href="#让人感到难过的歌" class="headerlink" title="让人感到难过的歌"></a>让人感到难过的歌<span id="10"></span></h2><h3 id="アンノウン・マザーグース（不为人知的鹅妈妈童谣）"><a href="#アンノウン・マザーグース（不为人知的鹅妈妈童谣）" class="headerlink" title="アンノウン・マザーグース（不为人知的鹅妈妈童谣）"></a><a href="https://music.163.com/song?id=502455381&uct2=U2FsdGVkX190QSPY97R0oNePGFa5ULWPWSk2kSduj/4=">アンノウン・マザーグース（不为人知的鹅妈妈童谣）</a></h3><h4 id="遥望令和之人在平成的绝唱，wowaka最后的术力口，哎，天妒英才。wowaka本人都不容易复刻的超高bpm，疾走感术曲Top1！"><a href="#遥望令和之人在平成的绝唱，wowaka最后的术力口，哎，天妒英才。wowaka本人都不容易复刻的超高bpm，疾走感术曲Top1！" class="headerlink" title="遥望令和之人在平成的绝唱，wowaka最后的术力口，哎，天妒英才。wowaka本人都不容易复刻的超高bpm，疾走感术曲Top1！"></a>遥望令和之人在平成的绝唱，wowaka最后的术力口，哎，天妒英才。wowaka本人都不容易复刻的超高bpm，疾走感术曲Top1！</h4><blockquote><p>「あたしが愛を語るのなら その眼には如何、映像る？」<br>&emsp;&emsp;若要由我来谈论爱的话、在那双眼中映出的又是何等景象？ — アンノウン・マザーグース</p></blockquote><h2 id="永远不会厌倦的歌"><a href="#永远不会厌倦的歌" class="headerlink" title="永远不会厌倦的歌"></a>永远不会厌倦的歌<span id="11"></span></h2><h3 id="November"><a href="#November" class="headerlink" title="November"></a><a href="https://music.163.com/song?id=492999801&uct2=U2FsdGVkX1+UV6GI5YYg7b5QZlCMKV7jJ4T5yNHzZd8=">November</a></h3><h4 id="永远的Top1，饭曲中最喜欢的一首，也是所有术力口中最喜欢的一首。本站个人简介的slogan就是这首歌的台词！下雪的日子必听的歌。（除了这首还有喜欢！雪！真实的魔法）"><a href="#永远的Top1，饭曲中最喜欢的一首，也是所有术力口中最喜欢的一首。本站个人简介的slogan就是这首歌的台词！下雪的日子必听的歌。（除了这首还有喜欢！雪！真实的魔法）" class="headerlink" title="永远的Top1，饭曲中最喜欢的一首，也是所有术力口中最喜欢的一首。本站个人简介的slogan就是这首歌的台词！下雪的日子必听的歌。（除了这首还有喜欢！雪！真实的魔法）"></a>永远的Top1，饭曲中最喜欢的一首，也是所有术力口中最喜欢的一首。本站个人简介的slogan就是这首歌的台词！下雪的日子必听的歌。（除了这首还有<a href="#9">喜欢！雪！真实的魔法</a>）</h4><blockquote><p>「ああガラス越しの藍さ」<br>&emsp;&emsp;啊 隔着玻璃的蓝 — November</p></blockquote><h2 id="00年代最喜欢的曲子"><a href="#00年代最喜欢的曲子" class="headerlink" title="00年代最喜欢的曲子"></a>00年代最喜欢的曲子<span id="12"></span></h2><h3 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a><a href="https://music.163.com/song?id=22730073&uct2=U2FsdGVkX18LFkD2SmkUZjOipqB2ZbPNPWceefs2l0o=">Magnet</a></h3><h4 id="是鱼葱！我们有救了！个人觉得这首比胧月好听。"><a href="#是鱼葱！我们有救了！个人觉得这首比胧月好听。" class="headerlink" title="是鱼葱！我们有救了！个人觉得这首比胧月好听。"></a>是鱼葱！我们有救了！个人觉得这首比胧月好听。</h4><blockquote><p>「抱き寄せて欲しい　確かめて欲しい」<br>&emsp;&emsp;想要被拥入你怀中 想要确认心意 — Magnet</p></blockquote><h2 id="想在婚礼上放的歌"><a href="#想在婚礼上放的歌" class="headerlink" title="想在婚礼上放的歌"></a>想在婚礼上放的歌<span id="13"></span></h2><h3 id="偏食"><a href="#偏食" class="headerlink" title="偏食"></a><a href="https://music.163.com/song?id=1841222221&uct2=U2FsdGVkX1+YOBkkqE9z3UhAOYbksEgIQUf+obgnV8c=">偏食</a></h3><h4 id="最有婚礼氛围的一首，对钢琴曲的刻板印象。或许会用来做婚礼上会播放的那种恋爱VCR的BGM"><a href="#最有婚礼氛围的一首，对钢琴曲的刻板印象。或许会用来做婚礼上会播放的那种恋爱VCR的BGM" class="headerlink" title="最有婚礼氛围的一首，对钢琴曲的刻板印象。或许会用来做婚礼上会播放的那种恋爱VCR的BGM"></a>最有婚礼氛围的一首，对钢琴曲的刻板印象。或许会用来做婚礼上会播放的那种恋爱VCR的BGM</h4><blockquote><p>「ダーリン、ダーリン、私を愛して。もっと、もっと、壊れるくらい。」<br>&emsp;&emsp;Darling，Darling，请爱我吧。多些，多些，直到堕落。 — 偏食</p></blockquote><h2 id="10年代最喜欢的曲子"><a href="#10年代最喜欢的曲子" class="headerlink" title="10年代最喜欢的曲子"></a>10年代最喜欢的曲子<span id="14"></span></h2><h3 id="黄金数"><a href="#黄金数" class="headerlink" title="黄金数"></a><a href="https://music.163.com/song?id=1825071525&uct2=U2FsdGVkX18RKUxN/qoh1Anvztl93dcRK3r/yiv6W+c=">黄金数</a></h3><h4 id="新兴p主中最喜欢的一位，这首是把胃弱既混乱又有序的个人风格阐释到极致的集大成作。"><a href="#新兴p主中最喜欢的一位，这首是把胃弱既混乱又有序的个人风格阐释到极致的集大成作。" class="headerlink" title="新兴p主中最喜欢的一位，这首是把胃弱既混乱又有序的个人风格阐释到极致的集大成作。"></a>新兴p主中最喜欢的一位，这首是把胃弱既混乱又有序的个人风格阐释到极致的集大成作。</h4><blockquote><p>「銃弾 ひとつ飛んだ、それは虚ろ 果ては骸、まるで真夜中の昼間、贈り主のいないおくりもの」<br>&emsp;&emsp;飞来的一颗子弹，那即是空虚 最终化为尸骸，就像在深夜中出现的白昼，没有赠送者的礼物。 — 黄金数</p></blockquote><h2 id="人生中听过的第一首术曲"><a href="#人生中听过的第一首术曲" class="headerlink" title="人生中听过的第一首术曲"></a>人生中听过的第一首术曲<span id="15"></span></h2><h3 id="ローリンガール（翻滚少女）"><a href="#ローリンガール（翻滚少女）" class="headerlink" title="ローリンガール（翻滚少女）"></a><a href="https://music.163.com/song?id=22699098&uct2=U2FsdGVkX19Y2mAaZ3hCuqwyOTH1/rsgp5cMmuEkfRQ=">ローリンガール（翻滚少女）</a></h3><h4 id="其实应该是甩葱歌，小学时代在妈妈的耳机中听到的。但是因为这首才喜欢上了术力口，所以最终在这两首里选择了滚女"><a href="#其实应该是甩葱歌，小学时代在妈妈的耳机中听到的。但是因为这首才喜欢上了术力口，所以最终在这两首里选择了滚女" class="headerlink" title="其实应该是甩葱歌，小学时代在妈妈的耳机中听到的。但是因为这首才喜欢上了术力口，所以最终在这两首里选择了滚女"></a>其实应该是甩葱歌，小学时代在妈妈的耳机中听到的。但是因为这首才喜欢上了术力口，所以最终在这两首里选择了滚女</h4><blockquote><p>「もう一回、もう一回、「私は今日も転がります。」と、少女は言う 少女は言う、言葉に意味を奏でながら！」<br>&emsp;&emsp;再一次，又一次。「我今天也跌倒了呢。」少女喃喃说道 少女喃喃自言自语，包含的意义就在言语字词之中奏响了！<br> — ローリンガール</p></blockquote><h1 id="To-Be-Continued…"><a href="#To-Be-Continued…" class="headerlink" title="To Be Continued… "></a>To Be Continued… <span id="16"></span><span id="17"></span><span id="18"></span><span id="19"></span><span id="20"></span></h1>]]></content>
      
      
      <categories>
          
          <category> Vocaloid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术力口 </tag>
            
            <tag> Vocaloid </tag>
            
            <tag> ボーカロイド </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（三）—— 线性表的应用</title>
      <link href="/2025/01/24/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/01/24/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon simple"><p><strong>数据结构笔记目录：</strong><ol class="series-items"><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（一）—— 线性表的顺序表示及常用操作">数据结构与算法（一）—— 线性表的顺序表示及常用操作</a></li><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（二）—— 线性表的链式表示及常用操作">数据结构与算法（二）—— 线性表的链式表示及常用操作</a></li><li><a href="/2025/01/24/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/" title="数据结构与算法（三）—— 线性表的应用">数据结构与算法（三）—— 线性表的应用</a></li></ol></p></div><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="循环链表的合并"><a href="#循环链表的合并" class="headerlink" title="循环链表的合并"></a>循环链表的合并</h3> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">Connect</span><span class="params">(LinkList Ta,LinkList Tb)</span></span>&#123; <span class="comment">//传入两个循环链表的尾指针，本操作为返回一个新表，故无需使用引用类型（&amp;）进行传参</span></span><br><span class="line">    Nnode* p = Ta -&gt; next; <span class="comment">//p存储表头结点</span></span><br><span class="line">    Ta -&gt; next = Tb -&gt; next -&gt; next; <span class="comment">//Ta表尾的next指向Tb首元结点</span></span><br><span class="line">    <span class="built_in">free</span>(Tb -&gt; next); <span class="comment">//释放Tb头结点</span></span><br><span class="line">    Tb -&gt; next = p; <span class="comment">//Tb的next指向Ta表头结点</span></span><br><span class="line">    <span class="keyword">return</span> Tb; <span class="comment">//返回修改后的循环链表尾指针</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="双向链表的定义"><a href="#双向链表的定义" class="headerlink" title="双向链表的定义"></a>双向链表的定义</h3> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DuLNode</span>&#123;</span><br><span class="line">   Elemtype data;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">DuLNode</span>* prior;</span><br><span class="line">   <span class="keyword">struct</span> <span class="title class_">DLNode</span>* next;</span><br><span class="line">&#125;DuLNode,*DuLinkList;</span><br></pre></td></tr></table></figure><h3 id="双向链表的插入"><a href="#双向链表的插入" class="headerlink" title="双向链表的插入"></a>双向链表的插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert_Dul</span><span class="params">(DuLinkList &amp;L,<span class="type">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!(p=<span class="built_in">GetElemP_Dul</span>(L,i))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   DuLNode* s = (DuLNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DuLNode)); </span><br><span class="line">   s -&gt; data = e; <span class="comment">//为要插入的s结点分配空间</span></span><br><span class="line">   s -&gt; prior = p -&gt; prior;</span><br><span class="line">   s -&gt; next = p; <span class="comment">//设置要插入节点的前驱和后继</span></span><br><span class="line">   <span class="comment">/* 这一步我这样处理是因为首先进行这两步不会影响原表的结构，便于理解 */</span></span><br><span class="line">   (p -&gt; prior) -&gt; next = s; <span class="comment">//p -&gt; prior 即为a结点，设置a结点的后继为s</span></span><br><span class="line">   p -&gt; prior = s; <span class="comment">//p结点指向b结点，设置b结点的前驱为s</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><img src="/images/DuL_Ins.png" alt="图2.2-1 双向链表的插入"></p><h3 id="双向链表的删除"><a href="#双向链表的删除" class="headerlink" title="双向链表的删除"></a>双向链表的删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete_DuL</span><span class="params">(DuLinkList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(!(p=<span class="built_in">GetElemP_Dul</span>(L,i))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   e = p -&gt; data;</span><br><span class="line">   (p -&gt; next) -&gt; prior = p -&gt; prior; <span class="comment">//p -&gt; next 为p的后继结点，设置此结点前驱域为p的前驱</span></span><br><span class="line">   (p -&gt; prior) -&gt; next = p -&gt; next; <span class="comment">//p -&gt; prior 为p的前驱结点，设置此结点后继域为p的后继</span></span><br><span class="line">   <span class="built_in">free</span>(p); <span class="comment">//释放要删除的节点</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="单链表、循环链表和双向链表的时间效率比较"><a href="#单链表、循环链表和双向链表的时间效率比较" class="headerlink" title="单链表、循环链表和双向链表的时间效率比较"></a>单链表、循环链表和双向链表的时间效率比较</h3><table><thead><tr><th align="center"></th><th align="center">查找表头结点（首元结点）</th><th align="center">查找表尾结点</th><th align="center">查找结点*P的前驱结点</th></tr></thead><tbody><tr><td align="center">带头结点的<strong>单链表</strong>L</td><td align="center">L -&gt; next<br> 时间复杂度O(1)</td><td align="center">从L -&gt; next依次向后遍历<br> 时间复杂度O(n)</td><td align="center">通过p -&gt; next无法找到其前驱</td></tr><tr><td align="center">带头结点的<strong>仅设头指针L</strong>的<strong>循环</strong>单链表</td><td align="center">L -&gt; next<br> 时间复杂度O(1)</td><td align="center">从L -&gt; next依次向后遍历<br> 时间复杂度O(n)</td><td align="center">通过p -&gt; next可以找到其前驱<br>时间复杂度O(n)</td></tr><tr><td align="center">带头结点的<strong>仅设尾指针R</strong>的<strong>循环</strong>单链表</td><td align="center">R -&gt; next<br> 时间复杂度O(1)</td><td align="center">R<br> 时间复杂度O(1)</td><td align="center">通过p -&gt; next可以找到其前驱<br>时间复杂度O(n)</td></tr><tr><td align="center">带头结点的<strong>双向循环</strong>链表L</td><td align="center">L -&gt; next<br>时间复杂度O(1)</td><td align="center">L -&gt; prior<br> 时间复杂度O(1)</td><td align="center">通过p -&gt; prior<br>时间复杂度O(1)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（二）—— 线性表的链式表示及常用操作</title>
      <link href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon simple"><p><strong>数据结构笔记目录：</strong><ol class="series-items"><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（一）—— 线性表的顺序表示及常用操作">数据结构与算法（一）—— 线性表的顺序表示及常用操作</a></li><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（二）—— 线性表的链式表示及常用操作">数据结构与算法（二）—— 线性表的链式表示及常用操作</a></li><li><a href="/2025/01/24/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/" title="数据结构与算法（三）—— 线性表的应用">数据结构与算法（三）—— 线性表的应用</a></li></ol></p></div><h2 id="单链表的表示"><a href="#单链表的表示" class="headerlink" title="单链表的表示"></a>单链表的表示</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Lnode</span>&#123;</span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">Lnode</span>* next;</span><br><span class="line">&#125;Lnode,*LinkList; <span class="comment">//LinkList为指向结构体Lnode的指针类型</span></span><br><span class="line"><span class="comment">//定义链表</span></span><br><span class="line">LinkList L;</span><br><span class="line"><span class="comment">//定义节点指针p</span></span><br><span class="line">LNode* p;</span><br><span class="line"><span class="comment">//LinkList == LNode*，分开两种定义方式的目的是使定义更加清晰</span></span><br></pre></td></tr></table></figure><h3 id="Ex-1：存储学生信息的单链表"><a href="#Ex-1：存储学生信息的单链表" class="headerlink" title="Ex:1：存储学生信息的单链表"></a>Ex:1：存储学生信息的单链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">  <span class="type">char</span> nom[<span class="number">12</span>]; <span class="comment">//学号数据域</span></span><br><span class="line">  <span class="type">char</span> name[<span class="number">8</span>]; <span class="comment">//姓名数据域</span></span><br><span class="line">  <span class="type">int</span> score; <span class="comment">//学生成绩数据域</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">student</span>* next; <span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,* LinkList;</span><br></pre></td></tr></table></figure><h2 id="单链表的初始化、判空、销毁、清空"><a href="#单链表的初始化、判空、销毁、清空" class="headerlink" title="单链表的初始化、判空、销毁、清空"></a>单链表的初始化、判空、销毁、清空</h2><h3 id="单链表的初始化"><a href="#单链表的初始化" class="headerlink" title="单链表的初始化"></a>单链表的初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">initList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L = (Lnode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Lnode)); <span class="comment">//生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class="line">  L -&gt; next = <span class="literal">NULL</span>; <span class="comment">//将头结点的指针域置空</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的判空：判断头结点指针域是否为空"><a href="#单链表的判空：判断头结点指针域是否为空" class="headerlink" title="单链表的判空：判断头结点指针域是否为空"></a>单链表的判空：判断头结点指针域是否为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListEmpty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的销毁：从头指针开始，依次释放所有节点"><a href="#单链表的销毁：从头指针开始，依次释放所有节点" class="headerlink" title="单链表的销毁：从头指针开始，依次释放所有节点"></a>单链表的销毁：从头指针开始，依次释放所有节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">DestroyList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  Lnode* p;</span><br><span class="line">  <span class="keyword">while</span>(L != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    Lnode* p = L;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的清空：依次释放所有结点，并将头结点指针域设置为空"><a href="#单链表的清空：依次释放所有结点，并将头结点指针域设置为空" class="headerlink" title="单链表的清空：依次释放所有结点，并将头结点指针域设置为空"></a>单链表的清空：依次释放所有结点，并将头结点指针域设置为空</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ClearList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  Lnode* p = L-&gt;next; <span class="comment">//指向要销毁的结点</span></span><br><span class="line">  Lnode* q; <span class="comment">//指向要销毁的结点的下一个节点</span></span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    Lnode* q = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求单链表的表长"><a href="#求单链表的表长" class="headerlink" title="求单链表的表长"></a>求单链表的表长</h2><h3 id="求单链表的表长-1"><a href="#求单链表的表长-1" class="headerlink" title="求单链表的表长"></a>求单链表的表长</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListLength_L</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  Lnode* p = L-&gt;next;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">      sum++;</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表的增删查改"><a href="#单链表的增删查改" class="headerlink" title="单链表的增删查改"></a>单链表的增删查改</h2><h3 id="求单链表的第i个元素"><a href="#求单链表的第i个元素" class="headerlink" title="求单链表的第i个元素"></a>求单链表的第i个元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem_L</span><span class="params">(LinkList L,<span class="type">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  Lnode* p = L-&gt;next;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//j表示现在p所指向的结点是链表L中的第几个元素</span></span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125; <span class="comment">//向后扫描，直到p指向第i个元素或p为空（即i超过了链表长度）</span></span><br><span class="line">  <span class="keyword">if</span>( !p || j &gt; i )<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//！p对应i值过大，找不到，j&gt;i对应i太小，不合法</span></span><br><span class="line">  e = p-&gt;data;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表按值查找"><a href="#单链表按值查找" class="headerlink" title="单链表按值查找"></a>单链表按值查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem_L</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">  Lnode* p = L-&gt;next;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L,ElemType e,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">  Lnode* p = L -&gt; next; <span class="comment">//现在指向的结点（头结点非首元结点情况）</span></span><br><span class="line">  Lnode* q = (Lnode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Lnode)); <span class="comment">//创建一个新结点</span></span><br><span class="line">  q -&gt; data = e;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//j表示现在p所指向的结点是链表L中的第几个元素</span></span><br><span class="line">  <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;</span><br><span class="line">    p = p -&gt; next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span> || j &gt; i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    q -&gt; next = p -&gt; next;</span><br><span class="line">    p -&gt; next = q ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表结点的删除"><a href="#单链表结点的删除" class="headerlink" title="单链表结点的删除"></a>单链表结点的删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  Lnode* p = L -&gt; next; <span class="comment">//现在指向的结点（头结点非首元结点情况）</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//j表示现在p所指向的结点是链表L中的第几个元素</span></span><br><span class="line">  <span class="keyword">while</span>(j &lt; i - <span class="number">1</span> &amp;&amp; p -&gt; next != <span class="literal">NULL</span>)&#123; <span class="comment">//第二个条件不是p != NULL的原因是遍历的终点是链表最后一个元素的前驱，即倒数第二个元素</span></span><br><span class="line">    p = p -&gt; next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125; <span class="comment">//寻找第i个结点的前驱</span></span><br><span class="line">  <span class="keyword">if</span>(p -&gt; next == <span class="literal">NULL</span> || j &gt; i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      Lnode* q = p -&gt; next; <span class="comment">//临时保存被删结点的地址以备释放</span></span><br><span class="line">      e = q -&gt; data; <span class="comment">//保存被删除结点数据域</span></span><br><span class="line">      p -&gt; next = q -&gt; next; <span class="comment">//改变被删除节点前驱的指针域（后继）</span></span><br><span class="line">      <span class="built_in">free</span>(q); <span class="comment">//释放被删除结点所占空间</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头插法、尾插法建立链表"><a href="#头插法、尾插法建立链表" class="headerlink" title="头插法、尾插法建立链表"></a>头插法、尾插法建立链表</h2><h3 id="头插法建立链表"><a href="#头插法建立链表" class="headerlink" title="头插法建立链表"></a>头插法建立链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeofL</span>(Node));</span><br><span class="line">  L -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = n,i &gt; <span class="number">0</span>,i--)&#123;</span><br><span class="line">    Lnode* p = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">    cin &gt;&gt; p -&gt; data;</span><br><span class="line">    p -&gt; next = L -&gt; next;</span><br><span class="line">    L -&gt;next = p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度为O(n)</strong></p><h3 id="尾插法建立链表"><a href="#尾插法建立链表" class="headerlink" title="尾插法建立链表"></a>尾插法建立链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateList_E</span><span class="params">(LinkList &amp;L,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">  L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  L -&gt; next = <span class="literal">NULL</span>; <span class="comment">//建立头结点和指向头节点的指针</span></span><br><span class="line">  Lnode* p = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  p -&gt; next = L; <span class="comment">//指向当前最后一个结点的结点（尾指针）</span></span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>,i &lt; n,i++)&#123;</span><br><span class="line">    Lnode* q = (LNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode)); </span><br><span class="line">    q -&gt; next = <span class="literal">NULL</span>; </span><br><span class="line">    cin &gt;&gt; q -&gt; data;<span class="comment">//生成新结点</span></span><br><span class="line">    p -&gt; next = q;</span><br><span class="line">    p = q; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>时间复杂度为O(n)</strong></p><h2 id="链表相关算法的算法分析"><a href="#链表相关算法的算法分析" class="headerlink" title="链表相关算法的算法分析"></a>链表相关算法的算法分析</h2><h3 id="我有看见时间复杂度就犯困的病，所以算法分析明天再看明天再写"><a href="#我有看见时间复杂度就犯困的病，所以算法分析明天再看明天再写" class="headerlink" title="我有看见时间复杂度就犯困的病，所以算法分析明天再看明天再写"></a>我有看见时间复杂度就犯困的病，所以算法分析明天再看明天再写</h3><h3 id="反正链表就差这一部分了，摸了摸了"><a href="#反正链表就差这一部分了，摸了摸了" class="headerlink" title="反正链表就差这一部分了，摸了摸了"></a>反正链表就差这一部分了，摸了摸了</h3><h1 id="To-Be-Continued…"><a href="#To-Be-Continued…" class="headerlink" title="To Be Continued…"></a>To Be Continued…</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（一）—— 线性表的顺序表示及常用操作</title>
      <link href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon simple"><p><strong>数据结构笔记目录：</strong><ol class="series-items"><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（一）—— 线性表的顺序表示及常用操作">数据结构与算法（一）—— 线性表的顺序表示及常用操作</a></li><li><a href="/2025/01/13/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" title="数据结构与算法（二）—— 线性表的链式表示及常用操作">数据结构与算法（二）—— 线性表的链式表示及常用操作</a></li><li><a href="/2025/01/24/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/" title="数据结构与算法（三）—— 线性表的应用">数据结构与算法（三）—— 线性表的应用</a></li></ol></p></div><h2 id="顺序表的构建"><a href="#顺序表的构建" class="headerlink" title="顺序表的构建"></a>顺序表的构建</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max_Size 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType elem[max_Size];</span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="Ex-1"><a href="#Ex-1" class="headerlink" title="Ex:1"></a>Ex:1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max_Size 100 <span class="comment">//宏定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">char</span> ISBN[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">&#125;Book;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    Book* add;<span class="comment">//存储空间基地址</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//当前图书个数</span></span><br><span class="line">&#125;SqList;<span class="comment">//这是一个存放图书信息的顺序表</span></span><br></pre></td></tr></table></figure><h3 id="EX-2：使用动态分配内存方式的顺序表"><a href="#EX-2：使用动态分配内存方式的顺序表" class="headerlink" title="EX:2：使用动态分配内存方式的顺序表"></a>EX:2：使用动态分配内存方式的顺序表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max_Size 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">//主函数中内容</span></span><br><span class="line">SqList L;<span class="comment">//定义顺序表变量L</span></span><br><span class="line">L.elem = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">SizeOf</span>(ElemType)*max_Size);<span class="comment">//动态分配内存</span></span><br></pre></td></tr></table></figure><h2 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList *L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L-&gt;length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;elem[i] == e)&#123;</span><br><span class="line">    <span class="keyword">return</span> i<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表的查找算法分析：平均查找长度ASL（Average-Search-Length）"><a href="#顺序表的查找算法分析：平均查找长度ASL（Average-Search-Length）" class="headerlink" title="顺序表的查找算法分析：平均查找长度ASL（Average Search Length）"></a>顺序表的查找算法分析：平均查找长度ASL（Average Search Length）</h3><p><strong>需要与给定值进行比较的关键字的个数的期望值（即查找次数的平均值）叫做查找算法的平均查找长度，用于分析查找算法的时间复杂度</strong></p><p><strong>ASL&#x3D;P1*N1+P2*N2+P3*N3…..</strong>(P为第i个记录被查找的概率，系数N为找到第i个元素须比较的次数)</p><p><strong>关于顺序表的查找算法，有：ASL&#x3D;P*0+P*1+…P*n(P&#x3D;1&#x2F;n)&#x3D;(n+1)&#x2F;2</strong>（查找次数从0到n次）</p><h2 id="顺序表的插入"><a href="#顺序表的插入" class="headerlink" title="顺序表的插入"></a>顺序表的插入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList *L,<span class="type">int</span> i，ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;L-&gt;length<span class="number">+1</span>||i&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == max_Size) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//顺序表已满</span></span><br><span class="line">    <span class="keyword">for</span>(j=L-&gt;Length<span class="number">-1</span>;j&lt;i;j--)&#123;</span><br><span class="line">        L-&gt;elem[j<span class="number">+1</span>] = L-&gt;elem[j];</span><br><span class="line">        &#125;<span class="comment">//将元素依次向后移空出下标为i-1的位置</span></span><br><span class="line">    L-&gt;elem[i<span class="number">-1</span>] = e;</span><br><span class="line">    l-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表的插入算法分析"><a href="#顺序表的插入算法分析" class="headerlink" title="顺序表的插入算法分析"></a>顺序表的插入算法分析</h3><p><strong>INS&#x3D;P*1+P*2+…P*n(P&#x3D;1&#x2F;n+1)&#x3D;n&#x2F;2</strong>（移动次数从0次到n次）</p><h2 id="顺序表的删除"><a href="#顺序表的删除" class="headerlink" title="顺序表的删除"></a>顺序表的删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ListDelete</span><span class="params">(Sqlist *L,<span class="type">int</span> i,ElemType *e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;L-&gt;length||i&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//i值不合法</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//顺序表为空</span></span><br><span class="line">    *e = L-&gt;elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&lt;L.length;j++)&#123;</span><br><span class="line">        L-&gt;elem[j] = L-&gt;elem[j<span class="number">+1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表的插入算法分析-1"><a href="#顺序表的插入算法分析-1" class="headerlink" title="顺序表的插入算法分析"></a>顺序表的插入算法分析</h3><p><strong>DEL&#x3D;P*1+P*2+…P*(n-1)(P&#x3D;1&#x2F;n)&#x3D;(n-1)&#x2F;2</strong>（移动次数从0到(n-1)）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 顺序表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年度个人拍摄雪景几则</title>
      <link href="/2025/01/11/2024%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%8B%8D%E6%91%84%E9%9B%AA%E6%99%AF%E5%87%A0%E5%88%99/"/>
      <url>/2025/01/11/2024%E5%B9%B4%E5%BA%A6%E4%B8%AA%E4%BA%BA%E6%8B%8D%E6%91%84%E9%9B%AA%E6%99%AF%E5%87%A0%E5%88%99/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon simple"><p>最近没在学习什么新技术，但是还是想充实一下这个博客，于是选了几张今年拍摄的一些好看的雪景。这样一来自己在没有雪的想看雪的时候翻一翻博客，还能籍此缓解夏天没有雪看的寂寞心情<br>封面图是中秋节在学校附近的公园放烟花时候拍的，感觉闪闪的很漂亮，就拿来做封面了。</p></div><h2 id="这两张是年初时在老家拍摄的"><a href="#这两张是年初时在老家拍摄的" class="headerlink" title="这两张是年初时在老家拍摄的"></a>这两张是年初时在老家拍摄的</h2><h3 id="我特别喜欢待在这条小山路上看雪！耳机里放着春卷饭冬日的歌，待在没什么人的小角落，望着眼前一片白茫茫，感觉格外的宁静。"><a href="#我特别喜欢待在这条小山路上看雪！耳机里放着春卷饭冬日的歌，待在没什么人的小角落，望着眼前一片白茫茫，感觉格外的宁静。" class="headerlink" title="我特别喜欢待在这条小山路上看雪！耳机里放着春卷饭冬日的歌，待在没什么人的小角落，望着眼前一片白茫茫，感觉格外的宁静。"></a>我特别喜欢待在这条小山路上看雪！耳机里放着春卷饭冬日的歌，待在没什么人的小角落，望着眼前一片白茫茫，感觉格外的宁静。</h3><img class="inline-img" src="/images/yuki_Img_1.jpg" style="height:250px" /><img class="inline-img" src="/images/yuki_Img_2.jpg" style="height:250px" /><h2 id="这几张是今年年末在学校拍的"><a href="#这几张是今年年末在学校拍的" class="headerlink" title="这几张是今年年末在学校拍的"></a>这几张是今年年末在学校拍的</h2><h3 id="呼和浩特的冬天真是暖的出奇，今年冬天一共就下了三场雪，所以在同样的机位拍了三张"><a href="#呼和浩特的冬天真是暖的出奇，今年冬天一共就下了三场雪，所以在同样的机位拍了三张" class="headerlink" title="呼和浩特的冬天真是暖的出奇，今年冬天一共就下了三场雪，所以在同样的机位拍了三张"></a>呼和浩特的冬天真是暖的出奇，今年冬天一共就下了三场雪，所以在同样的机位拍了三张</h3><img class="inline-img" src="/images/yuki_Img_3.jpg" style="height:180px" /><img class="inline-img" src="/images/yuki_Img_4.jpg" style="height:180px" /><img class="inline-img" src="/images/yuki_Img_5.jpg" style="height:180px" /><h3 id="雪一次比一次大了！（话说不这样才奇怪吧）"><a href="#雪一次比一次大了！（话说不这样才奇怪吧）" class="headerlink" title="雪一次比一次大了！（话说不这样才奇怪吧）"></a>雪一次比一次大了！（话说不这样才奇怪吧）</h3><h2 id="这张是我最喜欢的一张！"><a href="#这张是我最喜欢的一张！" class="headerlink" title="这张是我最喜欢的一张！"></a>这张是我最喜欢的一张！</h2><h3 id="无人的角落，飘落的黄叶，以雪为衣的大树，感觉心里暖暖的。冬天最吸引人的正是在于刺骨的寒风衬托出的暖洋洋的感觉啊！脖子上的围巾，室内的暖气，寒风浸透的全身被各种各样暖洋洋的东西一点点的焐热的感觉真是太棒了！"><a href="#无人的角落，飘落的黄叶，以雪为衣的大树，感觉心里暖暖的。冬天最吸引人的正是在于刺骨的寒风衬托出的暖洋洋的感觉啊！脖子上的围巾，室内的暖气，寒风浸透的全身被各种各样暖洋洋的东西一点点的焐热的感觉真是太棒了！" class="headerlink" title="无人的角落，飘落的黄叶，以雪为衣的大树，感觉心里暖暖的。冬天最吸引人的正是在于刺骨的寒风衬托出的暖洋洋的感觉啊！脖子上的围巾，室内的暖气，寒风浸透的全身被各种各样暖洋洋的东西一点点的焐热的感觉真是太棒了！"></a>无人的角落，飘落的黄叶，以雪为衣的大树，感觉心里暖暖的。冬天最吸引人的正是在于刺骨的寒风衬托出的暖洋洋的感觉啊！脖子上的围巾，室内的暖气，寒风浸透的全身被各种各样暖洋洋的东西一点点的焐热的感觉真是太棒了！</h3><p><img src="/images/yuki_Img_6.jpg"></p><h2 id="并不是雪景的论外一则"><a href="#并不是雪景的论外一则" class="headerlink" title="并不是雪景的论外一则"></a>并不是雪景的论外一则</h2><h3 id="是工程实训课上用数控铣打出来的亚克力片片，感觉像是琥珀把雪花包在里面了一样，很喜欢"><a href="#是工程实训课上用数控铣打出来的亚克力片片，感觉像是琥珀把雪花包在里面了一样，很喜欢" class="headerlink" title="是工程实训课上用数控铣打出来的亚克力片片，感觉像是琥珀把雪花包在里面了一样，很喜欢"></a>是工程实训课上用数控铣打出来的亚克力片片，感觉像是琥珀把雪花包在里面了一样，很喜欢</h3><p><img src="/images/yuki_Img_7.jpg"></p><h3 id="突然发现这篇博客插了好多图片，图都是存在项目里的，本来想到博客应该用不到很多图所以就全存本地了，这下看来不得不搞个图床来存了"><a href="#突然发现这篇博客插了好多图片，图都是存在项目里的，本来想到博客应该用不到很多图所以就全存本地了，这下看来不得不搞个图床来存了" class="headerlink" title="突然发现这篇博客插了好多图片，图都是存在项目里的，本来想到博客应该用不到很多图所以就全存本地了，这下看来不得不搞个图床来存了"></a>突然发现这篇博客插了好多图片，图都是存在项目里的，本来想到博客应该用不到很多图所以就全存本地了，这下看来不得不搞个图床来存了</h3><h3 id="以上！希望2025能拍到更多好看的雪景！！"><a href="#以上！希望2025能拍到更多好看的雪景！！" class="headerlink" title="以上！希望2025能拍到更多好看的雪景！！"></a>以上！希望2025能拍到更多好看的雪景！！</h3>]]></content>
      
      
      <categories>
          
          <category> 雪景 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪景 </tag>
            
            <tag> 照片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于在Hexo的butterfly插件中添加本地搜索功能的方法及细节补充</title>
      <link href="/2025/01/09/1st/"/>
      <url>/2025/01/09/1st/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为看到的所有教程都漏掉了一小步，可能会有人对此纠结很久，遂决定新写一篇文章，同时作为本站的第一篇文章，希望能帮到其他被此问题困扰的朋友</p></blockquote><h2 id="博客根目录安装插件"><a href="#博客根目录安装插件" class="headerlink" title="博客根目录安装插件"></a>博客根目录安装插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><h3 id="在根目录-config-yml文件添加如下文本"><a href="#在根目录-config-yml文件添加如下文本" class="headerlink" title="在根目录_config.yml文件添加如下文本"></a>在根目录_config.yml文件添加如下文本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="将-config-butterfly-yml文件中的search段中的use键的值改为local-search"><a href="#将-config-butterfly-yml文件中的search段中的use键的值改为local-search" class="headerlink" title="将_config.butterfly.yml文件中的search段中的use键的值改为local_search"></a>将_config.butterfly.yml文件中的search段中的use键的值改为local_search</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="string">use：local_search</span></span><br><span class="line">    <span class="comment"># 注意！！一定要在“：”和“Local_search”中间添加空格</span></span><br><span class="line">    <span class="comment"># 所有的教程都少了这一步</span></span><br></pre></td></tr></table></figure><h3 id="将-config-butterfly-yml文件中的local-search段中的enable键的值改为true，如没有此键则添加"><a href="#将-config-butterfly-yml文件中的local-search段中的enable键的值改为true，如没有此键则添加" class="headerlink" title="将_config.butterfly.yml文件中的local_search段中的enable键的值改为true，如没有此键则添加"></a>将_config.butterfly.yml文件中的local_search段中的enable键的值改为true，如没有此键则添加</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="string">enable：true</span></span><br></pre></td></tr></table></figure><h2 id="检查是否设置成功"><a href="#检查是否设置成功" class="headerlink" title="检查是否设置成功"></a>检查是否设置成功</h2><h3 id="本地检查"><a href="#本地检查" class="headerlink" title="本地检查"></a>本地检查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl;hexo s</span><br></pre></td></tr></table></figure><h3 id="检查无误后推送至仓库"><a href="#检查无误后推送至仓库" class="headerlink" title="检查无误后推送至仓库"></a>检查无误后推送至仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl ; hexo generate ; hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 技术 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
